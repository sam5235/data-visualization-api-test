// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data_visualization_api.Infrastructure.Data;

#nullable disable

namespace data_visualization_api.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("data_visualization_api.Domain.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChartTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedChartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedIndicatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XAxisLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YAxisLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("data_visualization_api.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("data_visualization_api.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("data_visualization_api.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("data_visualization_api.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("data_visualization_api.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("data_visualization_api.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("data_visualization_api.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("data_visualization_api.Domain.Entities.Chart", b =>
                {
                    b.OwnsMany("data_visualization_api.Domain.Entities.CountryData", "SelectedCountriesData", b1 =>
                        {
                            b1.Property<int>("ChartId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("CountryId")
                                .HasColumnType("int");

                            b1.Property<string>("CountryName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("YearDataJson")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("YearData");

                            b1.HasKey("ChartId", "Id");

                            b1.ToTable("Charts");

                            b1.ToJson("SelectedCountriesData");

                            b1.WithOwner()
                                .HasForeignKey("ChartId");
                        });

                    b.OwnsMany("data_visualization_api.Domain.Entities.Indicator", "SelectedIndicators", b1 =>
                        {
                            b1.Property<int>("ChartId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Coverage")
                                .HasColumnType("int");

                            b1.Property<int>("CoverageCountry")
                                .HasColumnType("int");

                            b1.Property<int>("CoverageSubRegion")
                                .HasColumnType("int");

                            b1.Property<int>("DataPoints")
                                .HasColumnType("int");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DescriptionFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("EarliestYear")
                                .HasColumnType("int");

                            b1.Property<int>("LatestYear")
                                .HasColumnType("int");

                            b1.Property<string>("ModeEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ModeFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Multiplier")
                                .HasColumnType("int");

                            b1.Property<string>("NameEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NameFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ReplId")
                                .HasColumnType("int");

                            b1.Property<int>("RootIndicatorId")
                                .HasColumnType("int");

                            b1.Property<int>("RoundLevel")
                                .HasColumnType("int");

                            b1.Property<string>("ScaleEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ScaleFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ShortNameEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ShortNameFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TopicIds")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UnitEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UnitFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ChartId", "Id");

                            b1.ToTable("Charts");

                            b1.ToJson("SelectedIndicators");

                            b1.WithOwner()
                                .HasForeignKey("ChartId");
                        });

                    b.OwnsOne("data_visualization_api.Domain.Entities.LegendOptions", "LegendOptions", b1 =>
                        {
                            b1.Property<int>("ChartId")
                                .HasColumnType("int");

                            b1.Property<string>("Align")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Left")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Orient")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("Show")
                                .HasColumnType("bit");

                            b1.Property<string>("Top")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ChartId");

                            b1.ToTable("Charts");

                            b1.ToJson("LegendOptions");

                            b1.WithOwner()
                                .HasForeignKey("ChartId");
                        });

                    b.OwnsMany("data_visualization_api.Domain.Entities.Topic", "SelectedTopics", b1 =>
                        {
                            b1.Property<int>("ChartId")
                                .HasColumnType("int");

                            b1.Property<int>("TopicId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("CoverageCountryCount")
                                .HasColumnType("int");

                            b1.Property<int>("CoverageSubRegionCount")
                                .HasColumnType("int");

                            b1.Property<int>("DataPointsCount")
                                .HasColumnType("int");

                            b1.Property<string>("DescriptionEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DescriptionFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("EarliestYear")
                                .HasColumnType("int");

                            b1.Property<int>("LatestYear")
                                .HasColumnType("int");

                            b1.Property<string>("MainTopicEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MainTopicFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Order")
                                .HasColumnType("int");

                            b1.Property<int>("SubIndicatorsCount")
                                .HasColumnType("int");

                            b1.Property<string>("TopicCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TopicEn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TopicFr")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ChartId", "TopicId");

                            b1.ToTable("Charts");

                            b1.ToJson("SelectedTopics");

                            b1.WithOwner()
                                .HasForeignKey("ChartId");
                        });

                    b.Navigation("LegendOptions")
                        .IsRequired();

                    b.Navigation("SelectedCountriesData");

                    b.Navigation("SelectedIndicators");

                    b.Navigation("SelectedTopics");
                });

            modelBuilder.Entity("data_visualization_api.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("data_visualization_api.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("data_visualization_api.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("data_visualization_api.Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<int>("TodoListId")
                                .HasColumnType("int");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoLists");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("data_visualization_api.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
